:root {
  --max-width: 1100px;
  --border-radius: 12px;
  --font-mono: ui-monospace, Menlo, Monaco, "Cascadia Mono", "Segoe UI Mono",
    "Roboto Mono", "Oxygen Mono", "Ubuntu Monospace", "Source Code Pro",
    "Fira Mono", "Droid Sans Mono", "Courier New", monospace;

  --foreground-color: #000000;
  --background-color-start: #D6DBDC; 
  --background-color-end: #FFFFFF;
}

@media (prefers-color-scheme: dark) {
  :root {
    --foreground-color: #FFFFFF; 
    --background-color-start: #000000; 
    --background-color-end: #000000; 
  }
}

* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

html, body {
  height: 100%;
  max-width: 100vw;
  overflow-x: hidden;
}

body {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
  color: var(--foreground-color);
  background: linear-gradient(
      to bottom,
      var(--background-color-start),
      var(--background-color-end)
    );
}

a {
  color: inherit;
  text-decoration: none;
}

@media (prefers-color-scheme: dark) {
  html {
    color-scheme: dark;
  }
}
import type { Metadata } from "next";
import StyledComponentsRegistry from "@/lib/registry";
import { Inter } from "next/font/google";
import "./globals.css";
import { Navbar } from "@/components/Navbar";
import { Footer } from "@/components/Footer";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body className={inter.className}>
        <StyledComponentsRegistry>
          <div style={{ display: 'flex', flexDirection: 'column', minHeight: '100vh' }}>
            <Navbar />
            <main style={{ flex: 1 }}>{children}</main>
            <Footer />
          </div>
        </StyledComponentsRegistry>
      </body>
    </html>
  );
}
"use client";
import { usePathname } from "next/navigation";

import { Phone } from "@phosphor-icons/react";
import {
  NavbarContainer,
  NavList,
  NavItem,
  NavLink,
  Line,
  Telefone,
} from "./styles";

interface NavLinkProps {
  name: string;
  href: string;
}

const navLinks: NavLinkProps[] = [
  { name: "Home", href: "/" },
  { name: "Acessibilidade", href: "/acessibilidade" },
  { name: "Login / Cadastro ", href: "/login" },
  { name: "Contato ", href: "/contato" },
  { name: "Avaliação ", href: "/avaliacao" },
];

const Menu = () => {
  const pathname = usePathname();
  console.log(pathname);

  return navLinks.map((item, idx) => (
    <NavItem key={idx}>
      <NavLink
        href={item.href}
        className={pathname === item.href ? "active" : ""}
      >
        {item.name}
      </NavLink>
    </NavItem>
  ));
};

export const Navbar = () => {
  return (
    <>
      <Line>
        <Phone size={20} weight="fill" />
        <Telefone>+011 23451-6738</Telefone>
      </Line>
      <NavbarContainer>
        <NavList>
          <Menu />
        </NavList>
      </NavbarContainer>
    </>
  );
};
import styled from "styled-components";
import Link from "next/link";

export const NavbarContainer = styled.nav`
  display: flex;
  justify-content: center;
  padding: 1rem 2rem;
  background-color: black;
  width: 100%;
  height: 52px;
`;

export const Line = styled.div`
  display: flex;
  justify-content: center;
  background-color: #00a3ff;
  height: 30px;
  gap: 5px;
  align-items: center;
`;

export const NavList = styled.ul`
  list-style: none;
  display: flex;
  gap: 2rem;
  padding: 0;
  margin: 0;
  font-size: 15px;
`;

export const NavItem = styled.li`
  &:hover {
    color: #00a3ff;
  }
`;

export const Telefone = styled.div``;

export const NavLink = styled(Link)`
  text-decoration: none;
  color: white;
  transition: all 0.3s;
  &.active {
    color: #00a3ff;
  }
  &:hover {
    color: #00a3ff;
  }
`;
"use client";
import Link from "next/link";
import { Line } from "./styles";

export const Footer = () => {
  return (
    <>
      <Line>
        {" "}
        <Link href="https://github.com/rebecalopes822/html_sprint_tres">
          Link repositório: https://github.com/rebecalopes822/html_sprint_tres
        </Link>
      </Line>
    </>
  );
};
import styled from "styled-components";

export const Line = styled.div`
  display: flex;
  justify-content: center;
  background-color: #00a3ff;
  height: 50px;
  gap: 10px;
  align-items: center;
`;

export const Ink = styled.text``;
"use client";
import {
  Container,
  ImageArea,
  MainTitle,
  IMG,
  DivMain,
  Divs,
  Bloco,
  Title,
  Descricao,
  DivSection,
  Text,
  Flex,
  LayoutContainer,
} from "./styles";

import imagem from "/olho.jpg";

import { Info } from "@phosphor-icons/react";

const Inicial = () => {
  return (
    <>
      <DivSection>
        <LayoutContainer>
          <Container>
            <DivMain>
              <MainTitle>BEM VINDO!</MainTitle>
              <Text>
                PROJETO COM FOCO NA INCLUSÃO PARA PESSOAS DEFICIENTES VISUAIS
                COM O OBJETIVO DE CRIAR UMA EXPERIÊNCIA ÚNICA E INCLUSIVA PARA
                TODOS OS USUÁRIOS. ESTAMOS ENTUSIASMADOS EM APRESENTAR NOSSO
                LEITOR DE VOZ, UMA FERRAMENTA INOVADORA, A QUAL PROPORCIONARÁ
                UMA INTERAÇÃO INCRÍVEL E ACESSÍVEL.
              </Text>
            </DivMain>
            <ImageArea>
              <IMG
                src="/olho.jpg"
                width={500}
                height={500}
                alt="Descrição da imagem"
              />
            </ImageArea>
          </Container>
        </LayoutContainer>
      </DivSection>
      <LayoutContainer>
        <Divs id="acessibilidade">
          <Bloco>
            <Flex>
              <Title>O QUE OFERECEMOS</Title>
              <div>
                <Info size={22} weight="fill" />
              </div>
            </Flex>
            <Descricao>
              Leitor de texto dinâmico, transformando um texto em uma voz. Nosso
              leitor permite que o usuário com deficiência visual escute o que
              está sendo apresentado no texto.
            </Descricao>
          </Bloco>
          <Bloco>
            <Flex>
              <Title>CADASTRE-SE PARA CONHECERMOS MELHOR O NOSSO PÚBLICO</Title>

              <div>
                <Info size={22} weight="fill" />
              </div>
            </Flex>
            <Descricao>
              Nós acreditamos na importância de conhecer
               nossos usuários.Para garantir melhorias e 
               atender as suas necessidades e expectativas, 
               proporcionando uma melhor experiência possível, 
               solicitamos que você realize um rápido cadastro 
               informando sobre sua condição especial, caso tenha.
            </Descricao>
          </Bloco>
          <Bloco>
            <Flex>
              <Title>NOSSO COMPROMISSO COM O SUPORTE INCLUSIVO</Title>
              <div>
                <Info size={22} weight="fill" />
              </div>
            </Flex>
            <Descricao>
              Estamos empenhados em oferecer suporte abrangente e acessível.
              Queremos garantir que cada pessoa, independente de suas
              necessidades, sinta-se totalmente apoiada ao explorar nossa
              plataforma. Para isso, apresentamos o nosso compromisso com o
              suporte inclusivo.
            </Descricao>
          </Bloco>
        </Divs>
      </LayoutContainer>
    </>
  );
};

export default Inicial;
import Image from "next/image";
import styled from "styled-components";

export const Container = styled.div`
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  justify-content: center;
  margin: auto;
  padding: 7rem 0;
  background-color: #00a3ff;

  @media (min-width: 768px) {
    flex-direction: row;
    justify-content: space-between;
  }
`;

export const Text = styled.text`
  position: relative;
  width: 1rem;
`;

export const DivSection = styled.section`
  background-color: #00a3ff;
  padding: 0 2rem;
`;


export const DivMain = styled.div`
  width: 100%;
  max-width: 500px;
  text-align: justify;
  margin-bottom: 1.5rem;

  @media (min-width: 768px) {
    width: 50%;
    margin-bottom: 0;
  }
  

  @media (max-width: 767px) {
    margin-top: 2rem; 
  }
`;

export const ContentArea = styled.div`
  width: 100%;

  @media (min-width: 768px) {
    width: 60%;
  }
`;

export const ImageArea = styled.div`
  flex:1;
  max-width: 50%;
  display: flex;
  position: relative;

  @media (min-width: 768px) {
    width: 50%;
  }

  @media (max-width: 767px) {
    img {
      max-height: 300px; 
      object-fit: cover; 
    }
  }
`;

export const Header = styled.header`
  width: 100%;
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 10px 0;
`;

export const Nav = styled.nav`
  display: flex;
  gap: 10px;
`;

export const MainTitle = styled.h1`
  font-size: 2.5rem;
  margin-bottom: 0.5em;
`;

export const Section = styled.section`
  margin-top: 20px;
`;

export const Footer = styled.footer`
  width: 100%;
  margin-top: 30px;
  padding: 10px 0;
  background-color: #f0f0f0;
`;

export const IMG = styled(Image)`
  width: auto;
  height: auto;
`;

export const Divs = styled.div`
  margin-top: 90px;
  display: grid;
  margin-bottom: 90px;
  grid-template-columns: 1fr;
  padding: 0 2rem;
  gap: 40px;

  @media (min-width: 768px) {
    grid-template-columns: repeat(3, 1fr);
    padding: 0;
    gap: 150px;
  }
`;

export const Bloco = styled.div`
  display: flex;
  flex-direction: column;
  gap: 25px;
`;

export const Flex = styled.div`
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: space-between;
`;

export const LayoutContainer = styled.div`
  max-width: 1150px;
  width: 100%;
  margin: 0 auto;
`;

export const Title = styled.p`
  font-size: medium;
  font-weight: bold;
  width: 100%;
`;

export const Descricao = styled.text`
  font-size: small;
  text-align: justify;
`;
"use client";
import {
  Section,
  BlueDiv,
  FlexDiv,
  TextContainer,
  Paragraph,
  Button,
  ImageContainer,
  Image,
  FlexDivButtons,
  LayoutContainer,
  AcessibilidadeText,
} from "./styles";
import { useState } from "react";

const Acessibilidade = () => {
  const [isReading, setIsReading] = useState(false);

  const speechSynthesis = window.speechSynthesis;

  const startReading = () => {
    if (isReading) return;
    setIsReading(true);

    const textToRead = `BEM-VINDO À NOSSA ABA DEDICADA À ACESSIBILIDADE, ONDE A INOVAÇÃO SE ENCONTRA COM A INCLUSÃO SE ENCONTRA COM A INCLUSÃO. AQUI APRESENTAMOS NOSSO REVOLUCIONÁRIO
    LEITOR DE TELA, PROJETADO PARA TORNAR A EXPERIÊNCIA DIGITAL
    ACESSÍVEL E EFICIENTE PARA TODOS. DESCUBRA COMO VOCÊ PODE EXPLORAR
    O CONTEÚDO DE MANEIRA ÚNICA E INTUITIVA...`;
    const utterance = new SpeechSynthesisUtterance(textToRead);
    speechSynthesis.speak(utterance);

    utterance.onend = () => {
      setIsReading(false);
    };
  };

  const stopReading = () => {
    if (!isReading) return;
    speechSynthesis.cancel();
    setIsReading(false);
  };

  return (
    <Section>
      <BlueDiv>
        <h1>ACESSIBILIDADE</h1>
      </BlueDiv>
      <LayoutContainer>
        <FlexDiv>
          <TextContainer>
            <Paragraph>
              BEM-VINDO À NOSSA ABA DEDICADA À ACESSIBILIDADE, ONDE A INOVAÇÃO
              SE ENCONTRA COM A INCLUSÃO. AQUI APRESENTAMOS NOSSO REVOLUCIONÁRIO
              LEITOR DE TELA, PROJETADO PARA TORNAR A EXPERIÊNCIA DIGITAL
              ACESSÍVEL E EFICIENTE PARA TODOS. DESCUBRA COMO VOCÊ PODE EXPLORAR
              O CONTEÚDO DE MANEIRA ÚNICA E INTUITIVA:
            </Paragraph>
            <Paragraph>1. Leitura de Tela:</Paragraph>
            <Paragraph>
              Descrição Instantânea: Pressione “ATIVAR” para ouvir descrições
              detalhadas dos textos. 
            </Paragraph>
            <FlexDivButtons>
              <Button onClick={startReading}>ATIVAR</Button>
              <Button onClick={stopReading}>DESATIVAR</Button>
            </FlexDivButtons>
          </TextContainer>
          <ImageContainer>
            <Image src="/icon.jpg" alt="Ícone de acessibilidade" />
          </ImageContainer>
        </FlexDiv>
      </LayoutContainer>
    </Section>
  );
};

export default Acessibilidade;
import styled from "styled-components";

const colors = {
  gray: "#F0F0F0", 
  blue: "#00A3FF",
  black: "#000000",
  white: "#FFFFFF",
};

export const Section = styled.section`
  color: ${colors.black};
  font-family: "Arial";
  background-color: ${colors.gray}; 
  overflow: hidden;
`;

export const BlueDiv = styled.div`
  background-color: ${colors.blue};
  color: ${colors.white};
  text-align: center;
  padding: 1.675rem 0;
`;

export const FlexDiv = styled.div`
  display: flex;
  justify-content: space-between;
  padding: 3rem 2rem;

  @media (max-width: 768px) {
    flex-direction: column;
    text-align: center;
  }
`;

export const FlexDivButtons = styled.div`
  display: flex;
  justify-content: space-between;
  padding: 3rem 0;

  @media (max-width: 768px) {
    flex-direction: column;
    text-align: center;
  }
`;

export const TextContainer = styled.div`
  max-width: 600px;

  @media (max-width: 768px) {
    margin-bottom: 20px;
  }
`;

export const Paragraph = styled.p`
  margin-bottom: 10px;
  font-weight: bold;
  text-align: justify;
`;

export const Button = styled.button`
  background-color: ${colors.blue};
  color: ${colors.white}; // Alterado para branco
  border: none;
  padding: 10px 20px;
  cursor: pointer;
  border-radius: 4px;
  width: 200px;
  &:hover {
    background-color: ${colors.white}; 
    color: ${colors.blue}; 
    border: 0.2px solid ${colors.blue}; 
    opacity: 0.8;
  }

  @media (max-width: 768px) {
    margin: 0 auto 10px;
  }
`;

export const ImageContainer = styled.div`
  width: 100%;
  height: 100%;

  text-align: end;
  @media (max-width: 768px) {
    text-align: center;
  }
`;

export const Image = styled.img`
  width: 60%;
  height: 50%;
`;

export const LayoutContainer = styled.div`
  max-width: 1150px;
  width: 100%;
  margin: 0 auto;
`;

export const AcessibilidadeText = styled.span`
  color: ${colors.black};
`;
"use client";
import { useState } from "react";
import {
  Container,
  Title,
  SubTitle,
  Form,
  Label,
  Select,
  Option,
  Button,
  Result,
  CategoryContainer,
} from "./styles";

const Avaliacao = () => {
  const [designNota, setDesignNota] = useState<number | null>(null);
  const [acessibilidadeNota, setAcessibilidadeNota] = useState<number | null>(null);
  const [utilidadeNota, setUtilidadeNota] = useState<number | null>(null);
  const [submitted, setSubmitted] = useState(false);

  const handleSubmit = (event: React.FormEvent) => {
    event.preventDefault();
    setSubmitted(true);
  };

  return (
    <Container>
      <Title>Avaliação do Site</Title>
      <SubTitle>Agora através da sua avaliação saberemos o que precisamos melhorar no nosso site</SubTitle>
      <Form onSubmit={handleSubmit}>
        <CategoryContainer>
          <Label>Design e Interface do Site:</Label>
          <Select
            value={designNota ?? ""}
            onChange={(e) => setDesignNota(Number(e.target.value))}
            required
          >
            <Option value="">Selecione uma nota</Option>
            {[1, 2, 3, 4, 5].map((nota) => (
              <Option key={nota} value={nota}>
                {nota}
              </Option>
            ))}
          </Select>
        </CategoryContainer>
        <CategoryContainer>
          <Label>Quanto a aba "acessibilidade" está clara e funcional?</Label>
          <Select
            value={acessibilidadeNota ?? ""}
            onChange={(e) => setAcessibilidadeNota(Number(e.target.value))}
            required
          >
            <Option value="">Selecione uma nota</Option>
            {[1, 2, 3, 4, 5].map((nota) => (
              <Option key={nota} value={nota}>
                {nota}
              </Option>
            ))}
          </Select>
        </CategoryContainer>
        <CategoryContainer>
          <Label>Quanto foi útil a aba "acessibilidade" para você?</Label>
          <Select
            value={utilidadeNota ?? ""}
            onChange={(e) => setUtilidadeNota(Number(e.target.value))}
            required
          >
            <Option value="">Selecione uma nota</Option>
            {[1, 2, 3, 4, 5].map((nota) => (
              <Option key={nota} value={nota}>
                {nota}
              </Option>
            ))}
          </Select>
        </CategoryContainer>
        <Button type="submit">Enviar Avaliação</Button>
      </Form>
      {submitted && (
        <Result>
          <h2>Obrigado pela sua avaliação!</h2>
          <p>Design e Interface do Site: {designNota}</p>
          <p>Quanto a aba "acessibilidade" está clara e funcional?: {acessibilidadeNota}</p>
          <p>Quanto foi útil a aba "acessibilidade" para você?: {utilidadeNota}</p>
        </Result>
      )}
    </Container>
  );
};

export default Avaliacao;
import styled from "styled-components";

export const Container = styled.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 2rem;
  background-color: #f0f0f0;
`;

export const Title = styled.h1`
  font-size: 2rem;
  margin-bottom: 1rem;
`;

export const SubTitle = styled.h2`
  font-size: 1.5rem;
  margin-bottom: 1.5rem;
  text-align: center;
`;

export const Form = styled.form`
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 1rem;
  background-color: #fff;
  padding: 2rem;
  border-radius: 8px;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
`;

export const Label = styled.label`
  font-size: 1.2rem;
  margin-bottom: 0.5rem;
`;

export const Select = styled.select`
  padding: 0.5rem;
  font-size: 1rem;
  border-radius: 4px;
  border: 1px solid #ccc;
`;

export const Option = styled.option``;

export const Button = styled.button`
  padding: 0.5rem 1rem;
  font-size: 1rem;
  color: #fff;
  background-color: #007bff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  &:hover {
    background-color: #0056b3;
  }
`;

export const Result = styled.div`
  margin-top: 2rem;
  text-align: center;

  h2 {
    font-size: 1.5rem;
    margin-bottom: 1rem;
  }

  p {
    font-size: 1.2rem;
    margin: 0.5rem 0;
  }
`;

export const CategoryContainer = styled.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  width: 100%;
  max-width: 300px;
  margin-bottom: 1rem;
`;
"use client";

import {
  Table,
  TableHeader,
  TableRow,
  TableCell,
  IconContainer,
} from "./styles";
import { EnvelopeSimple } from "@phosphor-icons/react";

const Contato = () => {
  return (
    <Table>
      <tbody>
        <TableHeader>
          <TableCell>Nome</TableCell>
          <TableCell>Email Institucional</TableCell>
          <TableCell>RM</TableCell>
        </TableHeader>
        <TableRow>
          <TableCell>Giovanna Lima</TableCell>
          <TableCell>
            <IconContainer>
              <EnvelopeSimple size={24} />
              <span>rm553369@fiap.com.br</span>
            </IconContainer>
          </TableCell>
          <TableCell>553369</TableCell>
        </TableRow>
        <TableRow>
          <TableCell>Rebeca Lopes</TableCell>
          <TableCell>
            <IconContainer>
              <EnvelopeSimple size={24} />
              <span>rm553764@fiap.com.br</span>
            </IconContainer>
          </TableCell>
          <TableCell>553764</TableCell>
        </TableRow>
        <TableRow>
          <TableCell>Ilda Ester</TableCell>
          <TableCell>
            <IconContainer>
              <EnvelopeSimple size={24} />
              <span>rm554216@fiap.com.br</span>
            </IconContainer>
          </TableCell>
          <TableCell>554216</TableCell>
        </TableRow>
      </tbody>
    </Table>
  );
};

export default Contato;
import styled from 'styled-components';

export const Table = styled.table`
  margin: 50px auto;
  width: 80%;
  border-collapse: collapse;
  background-color: #fff;
  height: 40vh;
  margin-top: 110px;
  margin-bottom: 225px;
`;

export const TableHeader = styled.tr`
  background-color: #00A3FF;
  color: #fff;
`;

export const TableRow = styled.tr`
  border-bottom: 1px solid #ddd;

  &:nth-child(even) {
    background-color: #f2f2f2;
  }
`;

export const TableCell = styled.td`
  text-align: center;
  padding: 12px 35px;
  color: black;
`;

export const IconContainer = styled.span`
  display: flex;
  align-items: center;
  gap: 10px;
  justify-content: center;

  svg {
    fill: #00A3FF;
  }

  span {
    margin-left: 5px; 
  }
`;"use client";
import { ChangeEvent, useState } from "react";
import {
  Button,
  Form,
  FormContainer,
  Input,
  InputGroup,
  Label,
  PageContainer,
  Title,
} from "./styles";
 
const Login = () => {
  const [isButtonVisible, setIsButtonVisible] = useState(true);
  const [formData, setFormData] = useState({
    nome: "",
    email: "",
    senha: "",
    telefone: "",
    possuiCondicaoEspecial: "",
    loginEmail: "",
    loginSenha: "",
  });
 
  const handleInputChange = (e: ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };
 
  const handleButtonClick = () => {
    setFormData({
      nome: "",
      email: "",
      senha: "",
      telefone: "",
      possuiCondicaoEspecial: "",
      loginEmail: "",
      loginSenha: "",
    });
    setIsButtonVisible(false);
  };
 
  return (
    <PageContainer>
      <FormContainer>
        <Form>
          <Title>PREENCHA COM SUAS INFORMAÇÕES PESSOAIS</Title>
          <InputGroup>
            <Label htmlFor="nome">NOME</Label>
            <Input
              id="nome"
              name="nome"
              type="text"
              placeholder="Nome"
              value={formData.nome}
              onChange={handleInputChange}
            />
          </InputGroup>
          <InputGroup>
            <Label htmlFor="email">E-MAIL</Label>
            <Input
              id="email"
              name="email"
              type="email"
              placeholder="E-mail"
              value={formData.email}
              onChange={handleInputChange}
            />
          </InputGroup>
          <InputGroup>
            <Label htmlFor="telefone">TELEFONE</Label>
            <Input
              id="telefone"
              name="telefone"
              type="text"
              placeholder="Telefone"
              value={formData.telefone}
              onChange={handleInputChange}
            />
          </InputGroup>
          <InputGroup>
            <Label htmlFor="possuiCondicaoEspecial">POSSUI CONDIÇÃO ESPECIAL? S para (sim) e N para (não)</Label>
            <Input
              id="possuiCondicaoEspecial"
              name="possuiCondicaoEspecial"
              type="text"
              placeholder="Condição especial"
              value={formData.possuiCondicaoEspecial}
              onChange={handleInputChange}
            />
          </InputGroup>
          <InputGroup>
            {isButtonVisible && (
              <Button onClick={handleButtonClick}>Enviar</Button>
            )}
          </InputGroup>
        </Form>
 
        <Form>
          <Title>PARA LOGAR</Title>
          <InputGroup>
            <Label htmlFor="loginEmail">EMAIL</Label>
            <Input
              id="loginEmail"
              name="loginEmail"
              type="email"
              placeholder="Email"
              value={formData.loginEmail}
              onChange={handleInputChange}
            />
          </InputGroup>
          <InputGroup>
            <Label htmlFor="loginSenha">SENHA</Label>
            <Input
              id="loginSenha"
              name="loginSenha"
              type="password"
              placeholder="Senha"
              value={formData.loginSenha}
              onChange={handleInputChange}
            />
          </InputGroup>
          {isButtonVisible && (
            <Button onClick={handleButtonClick}>Enviar</Button>
          )}
        </Form>
      </FormContainer>
    </PageContainer>
  );
};
 
export default Login;
 import styled from 'styled-components';

export const PageContainer = styled.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  background-color: #fff;
`;

export const FormContainer = styled.div`
  display: flex;
  flex-direction: column;
  gap: 2rem;
  width: 90%;
  max-width: 800px;
  margin: 0 auto;

  @media (min-width: 768px) {
    flex-direction: row;
  }
  margin: 3rem 0;
`;

export const Form = styled.form`
  background-color: #f0f0f0;
  padding: 2rem;
  border-radius: 8px;
  width: 100%;

  @media (min-width: 768px) {
    width: 48%;
  }
`;

export const InputGroup = styled.div`
  display: flex;
  flex-direction: column;
  gap: 1rem;
  margin-top: 1rem;
`;

export const Label = styled.label`
  font-size: 1rem;
  color: #000;
`;

export const Input = styled.input`
  padding: 0.5rem;
  border: 1px solid #ccc;
  border-radius: 4px;
`;

export const Title = styled.h2`
  background-color: #000;
  color: #fff;
  padding: 0.5rem 1rem;
  border-radius: 8px;
  margin-bottom: 2rem;
  text-align: center;
`;

export const Button = styled.button`
  padding: 0.5rem 1rem;
  margin-top: 1rem;
  background-color: #00a3ff;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  &:hover {
    background-color: white;
    color: #00a3ff;
    border: 1px solid #00a3ff;
    opacity: 0.8;
  }
`;